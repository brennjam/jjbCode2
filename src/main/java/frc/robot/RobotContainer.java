// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final FlyWheel m_flyWheel = new FlyWheel();
    public final Raise m_raise = new Raise();
    public final DefaultDrive m_defaultDrive = new DefaultDrive();

// Joysticks
private final Joystick rightStick = new Joystick(1);
private final Joystick leftStick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("RaiseCommand: Raise+", new RaiseCommand(.1, m_raise));
    SmartDashboard.putData("RaiseCommand: Raise-", new RaiseCommand(-.1, m_raise));
    SmartDashboard.putData("FlyWheelCommand: HighSpeed", new FlyWheelCommand(.5, m_flyWheel));
    SmartDashboard.putData("FlyWheelCommand: LowSpeed", new FlyWheelCommand(.25, m_flyWheel));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
   


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
        m_defaultDrive.setDefaultCommand(new DriveWithJoySticks(leftStick::getY, rightStick::getY, m_defaultDrive) );
    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton raiseMinusButton = new JoystickButton(rightStick, 1);        
raiseMinusButton.whileHeld(new RaiseCommand(0, m_raise) ,true);
    SmartDashboard.putData("RaiseMinusButton",new RaiseCommand(0, m_raise) );

final JoystickButton raisePlusButton = new JoystickButton(rightStick, 1);        
raisePlusButton.whileHeld(new RaiseCommand(0, m_raise) ,true);
    SmartDashboard.putData("RaisePlusButton",new RaiseCommand(0, m_raise) );

final JoystickButton lowGoalButton = new JoystickButton(leftStick, 5);        
lowGoalButton.toggleWhenPressed(new FlyWheelCommand(.25, m_flyWheel) ,true);
    SmartDashboard.putData("LowGoalButton",new FlyWheelCommand(.25, m_flyWheel) );

final JoystickButton highGoalButton = new JoystickButton(leftStick, 4);        
highGoalButton.toggleWhenPressed(new FlyWheelCommand(.5, m_flyWheel) ,true);
    SmartDashboard.putData("HighGoalButton",new FlyWheelCommand(.5, m_flyWheel) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getLeftStick() {
        return leftStick;
    }

public Joystick getRightStick() {
        return rightStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

